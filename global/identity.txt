
📁 IAM Identity Account Setup:

---

🔐 1. Password Policy Configuration:
-----------------------------------
    resource "aws_iam_account_password_policy" "strict" { ... }

        - Enforces a secure password policy for all IAM users:
        - Minimum 10 characters
        - Must include lowercase, uppercase, numbers, symbols
        - Users can change their own passwords
        - Applied specifically to the Identity Account using `provider = aws.identity`

---

📜 2. Self-Manage Policy & Group:
-------------------------------
    resource "aws_iam_policy" "self_manage" { ... }
    resource "aws_iam_group" "self_manage" { ... }
    resource "aws_iam_group_policy_attachment" "self_manage" { ... }

        - Purpose: Allow users to manage their own IAM credentials (access keys, passwords, MFA).
        - Policy is loaded from a local JSON file (`self_manage.json`).
        - Attached to a group named `SelfManaged`.

---

🛡️ 3. Administrator Policy & Group:
----------------------------------
    resource "aws_iam_policy" "iam_admin" { ... }
    resource "aws_iam_group" "iam_admin" { ... }
    resource "aws_iam_group_policy_attachment" "iam_admin" { ... }

        - Purpose: Provide full IAM administrative access.
        - Policy defined in `iamadmin.json`.
        - Group `IAMAdministrator` is used for privileged users.

---

👥 4. User Creation with Group Assignment:
----------------------------------------
    module "users" {
    for_each = var.users
    ...
    }

        - Uses a custom module `awsusers` to create IAM users.
        - Assigns each user to:
        - `IAMAdministrator` group if role is "admin"
        - `SelfManaged` group otherwise
        - PGP keys are used to securely encrypt initial credentials.

---

🔁 5. User-to-Role Mapping (Cross-Account Access):
------------------------------------------------
    locals {
    user_role_mapping = { ... }
    }

        - Maps IAM user roles (developer/admin/readonly) to lists of IAM Role ARNs.
        - Allows users in the identity account to assume roles in other accounts (prod, staging, dev).

---

🔗 6. Attach Roles to Users Based on Role Mapping:
-------------------------------------------------
    module "user_role_mapping" {
    for_each = var.users
    ...
    }

        - Uses module `useriamrolepolicyattachment` to attach assume-role permissions to each user.
        - Ensures access control is dynamically managed per user’s role (developer, admin, readonly).

---

### list resources by regions:
       for region in $(aws ec2 describe-regions --query "Regions[*].RegionName" --output text); do
            echo "Region: $region"
            aws ec2 describe-instances --region $region --filters Name=instance-state-name,Values=running \
                --query "Reservations[*].Instances[*].InstanceId" --output text
        done  